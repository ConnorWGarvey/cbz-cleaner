#!/usr/bin/env groovy

import java.nio.file.Files
import java.nio.file.LinkOption
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.attribute.GroupPrincipal
import java.nio.file.attribute.PosixFileAttributes
import java.nio.file.attribute.PosixFileAttributeView
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipOutputStream

class Converter {
  void apply(Path file) {
    def extracted = extractImages(file)
    def name = fileNameWithoutExtension(file)
    def cbz = Paths.get("${name}.cbz").toAbsolutePath()
    writeCbz(cbz, extracted)
    copyPermissions(file, cbz)
    extracted.deleteDir()
  }

  void applyAll(Path directory) {
    directory.eachFile { file ->
      if (fileExtension(file) == 'pdf') {
        println "Converting ${file.fileName}"
        apply(file)
      }
    }
  }

  void copyPermissions(Path from, Path to) {
    GroupPrincipal group = Files.readAttributes(from, PosixFileAttributes.class, LinkOption.NOFOLLOW_LINKS).group();
    Files.getFileAttributeView(to, PosixFileAttributeView.class, LinkOption.NOFOLLOW_LINKS).setGroup(group);
  }

  String execute(List<String> command) {
    def proc = command.execute()
    def out = proc.in.text
    def err = proc.err.text
    proc.waitFor()
    def exitValue = proc.exitValue()
    if (exitValue != 0) {
      throw new ExitException("$out\n\n$err")
    }
    out
  }

  Path extractImages(Path path) {
    println "  Counting pages in ${path.fileName}"
    def name = fileNameWithoutExtension(path)
    def targetDirectory = Paths.get(name).toAbsolutePath()
    Files.createDirectories(targetDirectory)
    def pages = execute(['identify', path.toString()]).readLines().size()
    def digits = pages.toString().length()
    println "  Extracting images from ${path.fileName}"
    (1..pages).each { page ->
      def formattedPage = String.format("%0${digits}d", page)
      def targetPath = targetDirectory.resolve("${formattedPage}.webp")
      if (!Files.exists(targetPath)) {
        println "    Extracting page $formattedPage/$pages"
        execute(['convert', '-density', '600', '-alpha', 'flatten', "${path}[${page-1}]", '-fuzz', '4%', '-trim', '+repage', '-resize', '2000>x2000>', '+repage', '-quality', '95', targetPath.toString()])
      }
    }
    targetDirectory
  }

  String fileExtension(Path path) {
    def name = path.fileName.toString()
    name[name.lastIndexOf('.')+1..-1]
  }

  String fileNameWithoutExtension(Path path) {
    fileNameWithoutExtension(path.fileName.toString())
  }

  String fileNameWithoutExtension(String name) {
    name[0..name.lastIndexOf('.')-1]
  }

  void writeCbz(Path target, Path sourceDirectory) {
    println '  Compressing the CBZ'
    assert Files.isDirectory(sourceDirectory)
    new ZipOutputStream(Files.newOutputStream(target)).withCloseable { zipOut ->
      Files.list(sourceDirectory).toList().toSorted().each { sourcePath ->
        def entryOut = new ZipEntry(sourcePath.fileName.toString())
        zipOut.putNextEntry(entryOut)
        Files.newInputStream(sourcePath).withCloseable { content ->
          content.transferTo(zipOut)
        }
        zipOut.closeEntry()
      }
      zipOut.finish()
    }
  }
}

class ExitException extends Exception {
  public ExitException(String message) {
    super(message)
  }
}

try {
  new Converter().applyAll(Paths.get(''))
} catch (ExitException e) {
  println e.message
  System.exit(1)
}

