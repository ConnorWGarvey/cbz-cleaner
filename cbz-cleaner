#!/usr/bin/env groovy

import java.nio.file.StandardCopyOption
import java.nio.file.Files
import java.nio.file.FileSystems
import java.nio.file.LinkOption
import java.nio.file.Path
import java.nio.file.attribute.GroupPrincipal
import java.nio.file.attribute.PosixFileAttributes
import java.nio.file.attribute.PosixFileAttributeView
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipOutputStream

class Packager {
  boolean allFilesAreInOneDirectory(Path path) {
    return new ZipFile(path.toFile()).withCloseable { zip ->
      def entries = zip.entries()
      def directoryEntry = entries.hasMoreElements() ? entries.nextElement() : null
      if (!directoryEntry?.isDirectory()) return false
      while(entries.hasMoreElements()) {
        def entry = entries.nextElement()
        if (entry.isDirectory()) return false
        if (!entry.name.startsWith(directoryEntry.name)) return false
      }
      return true
    }
  }

  void repackage(Path file) {
    assert Files.isRegularFile(file)
    def fullFileName = file.fileName.toString()
    def fileName = fullFileName[fullFileName.lastIndexOf('/')+1..fullFileName.lastIndexOf('.')-1]
    def fileExtension = fullFileName[fullFileName.lastIndexOf('.')+1..-1]
    def fileTemp = file.parent.resolve("$fileName-cleaned.$fileExtension")
    new ZipFile(file.toFile()).withCloseable { zipIn ->
      new ZipOutputStream(Files.newOutputStream(fileTemp)).withCloseable { zipOut ->
        def entries = zipIn.entries()
        def directoryEntry = entries.nextElement()
        assert directoryEntry.isDirectory()
        while (entries.hasMoreElements()) {
          def entryIn = entries.nextElement()
          def entryOut = new ZipEntry(entryIn.name[entryIn.name.lastIndexOf('/')+1..-1])
          zipOut.putNextEntry(entryOut);
          zipIn.getInputStream(entryIn).withCloseable { content ->
            content.transferTo(zipOut)
          }
          zipOut.closeEntry()
        }
        zipOut.finish()
      }
    }
    GroupPrincipal group = Files.readAttributes(file.parent, PosixFileAttributes.class, LinkOption.NOFOLLOW_LINKS).group();
    Files.getFileAttributeView(fileTemp, PosixFileAttributeView.class, LinkOption.NOFOLLOW_LINKS).setGroup(group);
    Files.setOwner(fileTemp, Files.getOwner(file.parent))
    Files.move(fileTemp, file, StandardCopyOption.REPLACE_EXISTING)
  }

  void repackageAll(Path directory) {
    assert Files.isDirectory(directory)
    directory.eachFile { file ->
      if (allFilesAreInOneDirectory(file)) {
        repackage(file)
      }
    }
  }
}

new Packager().repackageAll(FileSystems.getDefault().getPath('.'))

