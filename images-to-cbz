#!/usr/bin/env ruby

require_relative 'lib/cli'
require_relative 'lib/pathname_extensions'
require_relative 'lib/shell'
require 'fileutils'
require 'pathname'
require 'slop'
require 'zip'

def package(delete:, directory:, quality:, trim_fuzz_factor:)
  name = directory.basename()
  trimmed = trim_all(directory:directory, quality:quality, trim_fuzz_factor:trim_fuzz_factor)
  cbz = directory.parent.child("#{name}.cbz")
  trimmed.copy_directory_to_zip(cbz)
  directory.copy_permissions_to(cbz)
  trimmed.delete_directory
  directory.delete_directory if delete
end

def package_all(delete:, directory:, quality:, trim_fuzz_factor:)
  directory.each_directory do |subdirectory|
    puts("Converting #{subdirectory.basename}")
    package(directory:subdirectory, delete:delete, quality:quality, trim_fuzz_factor:trim_fuzz_factor)
  end
end

def trim_all(directory:, quality:, trim_fuzz_factor:)
  puts('  Trimming images')
  target_directory = directory.parent.child("#{directory.basename}-trimmed").make_directory
  directory.each_file do |source_path|
    target_path = target_directory.child("#{source_path.basename_without_extension}.webp")
    if !target_path.exist?
      puts "    Trimming #{source_path.basename}"
      begin
        Shell.run(['convert', '-fuzz', "#{trim_fuzz_factor}%", '-trim', '+repage', '-resize', '2700>x2700>', '-quality', quality.to_s, source_path.to_s, target_path.to_s])
      rescue ShellError => e
        raise ExitException(e.message)
      end
    end
  end
  target_directory
end

options = Slop.parse do |o|
  o.bool '--delete', 'Delete the image directory after conversion'
  o.integer '--quality', 'Compressed image quality', default:94
  o.integer '--trim-fuzz-factor', 'When trimming edges, how eager to be', default:7
end

package_all(delete:options[:delete], directory:Pathname.new('.'), quality:options[:quality], trim_fuzz_factor:options[:trim_fuzz_factor])

