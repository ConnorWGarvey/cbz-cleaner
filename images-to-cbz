#!/usr/bin/env ruby

require_relative 'lib/shell'
require 'fileutils'
require 'pathname'
require 'slop'
require 'zip'

def package(delete:, directory:, quality:, trim_fuzz_factor:)
  name = directory.basename()
  trimmed = trim_all(directory:directory, quality:quality, trim_fuzz_factor:trim_fuzz_factor)
  cbz = directory.parent.child("#{name}.cbz")
  write_cbz(source_directory:trimmed, target:cbz)
  directory.copy_permissions_to(cbz)
  trimmed.delete_directory
  directory.delete_directory if delete
end

def package_all(delete:, directory:, quality:, trim_fuzz_factor:)
  directory.each_directory do |subdirectory|
    puts("Converting #{subdirectory.basename}")
    package(directory:subdirectory, delete:delete, quality:quality, trim_fuzz_factor:trim_fuzz_factor)
  end
end


def execute(command)
  proc = command.execute()
  out = proc.in.text
  err = proc.err.text
  proc.waitFor()
  exitValue = proc.exitValue()
  if (exitValue != 0)
    throw ExitException.new("#{out}\n\n#{err}")
  end
end

def fileExtension(path)
  def name = path.fileName.toString()
  name[name.lastIndexOf('.')+1..-1]
end

def fileNameWithoutExtension(path)
  fileNameWithoutExtension(path.fileName.toString())
end

def fileNameWithoutExtension(name)
  name[0..name.lastIndexOf('.')-1]
end

def trim_all(directory:, quality:, trim_fuzz_factor:)
  puts('  Trimming images')
  target_directory = directory.parent.child("#{directory.basename}-trimmed").make_directory
  directory.each_file do |source_path|
    target_path = target_directory.child("#{source_path.basename_without_extension}.webp")
    if !target_path.exist?
      puts "    Trimming #{source_path.basename}"
      begin
        Shell.run(['convert', '-fuzz', "#{trim_fuzz_factor}%", '-trim', '+repage', '-resize', '2700>x2700>', '-quality', quality.to_s, source_path.to_s, target_path.to_s])
      rescue ShellError => e
        raise ExitException(e.message)
      end
    end
  end
  target_directory
end

def write_cbz(source_directory:, target:)
  puts('  Compressing the CBZ')
  Zip::File.open(target, create:true) do |zip|
    source_directory.each_file do |source_path|
      zip.get_output_stream(source_path.basename) do |writer|
        source_path.open do |reader|
          while block = reader.read(1024**2)
            writer << block
          end
        end
      end
    end
  end
end

class ExitException < StandardError
end

module PathnameFunctions
  def absolute() = self.realpath
  def basename_without_extension() = self.basename('.*')
  def child(name) = self + name

  def copy_permissions_to(to)
    user = nil # must be root to set user
    group = self.stat.gid # group number
    to.chown(user, group)
  end

  def delete_directory() = FileUtils.rm_r(self)

  def each_directory
    each_child do |f|
      yield f if f.directory?
    end
  end

  def each_file
    each_child do |f|
      yield f if f.file?
    end
  end

  def make_directory()
    Dir.mkdir(self)
    self
  end
  def make_directories() = FileUtils.mkdir_p(self)
  def parent = self.dirname
end
Pathname.class_eval{include PathnameFunctions}

options = Slop.parse do |o|
  o.bool '--delete', 'Delete the image directory after conversion'
  o.integer '--quality', 'Compressed image quality', default:94
  o.integer '--trim-fuzz-factor', 'When trimming edges, how eager to be', default:7
end

package_all(delete:options[:delete], directory:Pathname.new('.'), quality:options[:quality], trim_fuzz_factor:options[:trim_fuzz_factor])

