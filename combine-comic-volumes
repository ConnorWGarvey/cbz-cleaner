#!/usr/bin/env ruby

require_relative 'lib/cli'
require_relative 'lib/magick'
require_relative 'lib/pathname_extensions'
require_relative 'lib/shell'
require_relative 'lib/zip_extensions'
require 'bigdecimal'
require 'fileutils'
require 'pathname'
require 'slop'
require 'zip'

# Combines images from multiple issues into a single volume
# 1. Ensure issues have names matching the format "Series Name - 0001"
# 2. Create directories for volumes with names in the format "Series Name - 0001-0012 - Volume 01"
# 3. Run this application

class Combiner
  def apply(parent_directory:)
    extensions_to_skip = Set.new(['xml'])
    files_to_skip = Set.new(['.nomedia'])

    volumes = parent_directory.child_directories.map{|d|Volume.parse(d)}.compact
    volumes.each do |volume|
      if volume.path.children?
        puts "Skipping #{volume.path.basename.to_s} because it already contains files"
      else
        puts "Combining #{volume.path.basename.to_s}"
        issues = parent_directory.sorted_children.select{|c|c.directory? || c.extension == 'cbz' || c.extension == 'zip'}.map do |f|
          match = f.basename.to_s.match(/(.*) - (\d{4}(?:\.\d+)?)/)
          if match
            name = match[1]
            number = match[2]
            type =
              if f.directory?
                :directory
              elsif f.extension == 'cbz' || f.extension == 'zip'
                :zip
              else
                raise "Unknown type: #{pathname}"
              end
            Issue.new(number: BigDecimal(number), path: f, series: name, type: type)
          else
            false
          end
        end.select{|i|volume.series == i.series && volume.include_issue?(issue: i.number)}  
        issues.each_with_index do |issue, issue_index|
          directories_to_clean = []
          extracted_directory =
            if issue.type == :zip
              extracted_dir = issue.path.create_sibling_directory_with_appendix("-extracted")
              Zip::File.with_sorted_entries(issue.path, exclude_extensions: ['xml']) do |entry|
                entry.copy_to_directory(extracted_directory)
              end
              directories_to_clean << extracted_dir
              extracted_dir
            elsif issue.type == :directory
              issue.path
            else
              raise "Unsupported type: #{issue.type}"
            end
          puts '  Collecting'
	  extracted_directory.sorted_children.each_with_index do |file, file_index|
            if (!files_to_skip.include?(file.basename.to_s)) && (!extensions_to_skip.include?(file.extension))
              target_file = volume.path + "#{(issue_index + 1).to_s.rjust(6, '0')}-#{(file_index + 1).to_s.rjust(6, '0')}.#{file.extension}"
              if issue.type == :directory
                puts "    Copying issue #{issue.readable_number}:#{file.basename.to_s} to #{target_file.basename.to_s}"
                file.copy_with_permissions(target_file)
              else
                puts "    Moving issue #{issue.readable_number}:#{file.basename.to_s} to #{target_file.basename.to_s}"
                file.move_with_permissions(target_file)
              end
            end
	  end
          directories_to_clean.each{|d|d.delete_directory}
        end
      end
    end
  end
end

class Issue
  attr_accessor :number, :path, :series, :type

  def initialize(number:, path:, series:, type:)
    @path = path
    @number = number
    @series = series
    @type = type
  end

  def self.parse(pathname)
    match = pathname.basename.to_s.match(/(.*) - (\d{4}(?:\.\d+)?)/)
    if match
      series = match[1]
      number = BigDecimal(match[2])
      type =
        if pathname.directory?
          :directory
        elsif pathname.extension == 'cbz' || pathname.extension == 'zip'
          :zip
        else
          raise "Unknown type: #{pathname}"
        end
      new(path: pathname, number: number, series: series, type: type)
    else
      nil
    end
  end

  def readable_number
    @number.to_s('F').sub(/\.?0+$/, '')
  end

  def to_s
    <<~TO_S
    Issue: {
      number: #{@number},
      path: #{@path},
      series: "#{@series}",
      type: "#{@type}",
    }
    TO_S
  end
end

class Volume
  attr_accessor :end_index, :number, :path, :series, :start_index

  def self.parse(pathname)
    match = pathname.basename.to_s.match(/(.*) - (\d{4}(?:\.\d+)?)-(\d{4}(?:\.\d+)?) - Volume (\d{2})/)
    if match
      series = match[1]
      start_index = BigDecimal(match[2])
      end_index = BigDecimal(match[3])
      number = match[4].to_i
      new(path: pathname, end_index: end_index, number: number, series: series, start_index: start_index)
    else
      nil
    end
  end 

  def initialize(end_index:, number:, path:, series:, start_index:)
    @path = path
    @end_index = end_index
    @number = number
    @series = series
    @start_index = start_index
  end

  def include_issue?(issue:)
    issue >= start_index && issue <= end_index
  end

  def to_s
    <<~TO_S
    Volume: {
      end_index: #{@end_index.to_s('F')},
      number: #{@number},
      path: #{@path},
      series: "#{@series}",
      start: #{@start_index.to_s('F')}
    }
    TO_S
  end
end

options = Slop.parse do |o|
  o.bool '--compression', 'Type of image compression', default:'png'
  o.integer '--trim-fuzz-factor', 'When trimming edges, how eager to be', default:7
end

Combiner.new.apply(parent_directory: Pathname.new('.'))

