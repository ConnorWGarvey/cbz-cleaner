#!/usr/bin/env ruby

require_relative 'lib/cli'
require_relative 'lib/magick'
require_relative 'lib/pathname_extensions'
require_relative 'lib/shell'
require_relative 'lib/zip_extensions'
require 'bigdecimal'
require 'fileutils'
require 'pathname'
require 'slop'
require 'zip'

# Combines images from multiple issues into a single volume
# 1. Ensure issues have names matching the format "Series Name - 0001"
# 2. Create directories for volumes with names in the format "Series Name - 0001-0012 - Volume 01"
# 3. Run this application

class Combiner
  def apply(parent_directory:)
    volumes = parent_directory.child_directories.map{|d|Volume.parse(d)}.compact
    volumes.each do |volume|
      if volume.path.children?
        puts "Skipping #{volume.path.basename.to_s} because it already contains files"
      else
        puts "Combining #{volume.path.basename.to_s}"
        issues = parent_directory.sorted_children_with_extension('cbz').map do |f|
          match = f.basename.to_s.match(/(.*) - (\d{4}(?:\.\d+)?)/)
          if match
            name = match[1]
            number = match[2]
            Issue.new(number: BigDecimal(number), path: f, series: name)
          else
            false
          end
        end.select{|i|volume.series == i.series && volume.include_issue?(issue: i.number)}  
        issues.each_with_index do |issue, issue_index|
          extracted_directory = issue.path.create_sibling_directory_with_appendix("-extracted")
          Zip::File.with_sorted_entries(issue.path, exclude_extensions: ['xml']) do |entry|
            entry.copy_to_directory(extracted_directory)
          end
          trimmed_directory = Magick::trim_all(compression: 'png', directory: extracted_directory, trim_count: 2, suffix: '-trimmed')
          puts '  Collecting'
					trimmed_directory.sorted_children.each_with_index do |file, file_index|
            target_file = volume.path + "#{(issue_index + 1).to_s.rjust(6, '0')}-#{(file_index + 1).to_s.rjust(6, '0')}.#{file.extension}"
            puts "    Moving issue #{issue.readable_number}:#{file.basename.to_s} to #{target_file.basename.to_s}"
						FileUtils.mv(file, target_file)
            issue.path.copy_permissions_to(target_file)
					end
          extracted_directory.delete_directory
          trimmed_directory.delete_directory
        end
      end
    end
  end
end

class Issue
  attr_accessor :number, :path, :series

  def initialize(number:, path:, series:)
    @path = path
    @number = number
    @series = series
  end

  def self.parse(pathname)
    match = pathname.basename.to_s.match(/(.*) - (\d{4}(?:\.\d+)?)/)
    if match
      series = match[1]
      number = BigDecimal(match[2])
      new(path: pathname, number: number, series: series)
    else
      nil
    end
  end

  def readable_number
    @number.to_s('F').sub(/\.?0+$/, '')
  end

  def to_s
    <<~TO_S
    Issue: {
      number: #{@number},
      path: #{@path},
      series: "#{@series}",
    }
    TO_S
  end
end

class Volume
  attr_accessor :end_index, :number, :path, :series, :start_index

  def self.parse(pathname)
    match = pathname.basename.to_s.match(/(.*) - (\d{4}(?:\.\d+)?)-(\d{4}(?:\.\d+)?) - Volume (\d{2})/)
    if match
      series = match[1]
      start_index = BigDecimal(match[2])
      end_index = BigDecimal(match[3])
      number = match[4].to_i
      new(path: pathname, end_index: end_index, number: number, series: series, start_index: start_index)
    else
      nil
    end
  end 

  def initialize(end_index:, number:, path:, series:, start_index:)
    @path = path
    @end_index = end_index
    @number = number
    @series = series
    @start_index = start_index
  end

  def include_issue?(issue:)
    issue >= start_index && issue <= end_index
  end

  def to_s
    <<~TO_S
    Volume: {
      end_index: #{@end_index.to_s('F')},
      number: #{@number},
      path: #{@path},
      series: "#{@series}",
      start: #{@start_index.to_s('F')}
    }
    TO_S
  end
end

options = Slop.parse do |o|
  o.bool '--compression', 'Type of image compression', default:'png'
  o.integer '--trim-fuzz-factor', 'When trimming edges, how eager to be', default:7
end

Combiner.new.apply(parent_directory: Pathname.new('.'))

