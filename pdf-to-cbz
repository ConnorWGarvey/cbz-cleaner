#!/usr/bin/env ruby

require_relative 'lib/cli'
require_relative 'lib/magick'
require_relative 'lib/pathname_extensions'
require_relative 'lib/shell'
require 'set'
require 'slop'

def convert(compression:, delete:, file:, trim_count:)
  extracted = extract_images(file)
  untrimmed_cbz = file.with_extension('cbz').sibling_with_appendix('-untrimmed')
  scaled = trim_all(compression:compression, directory:extracted, trim_count:0)
  scaled.copy_directory_to_zip(untrimmed_cbz, naming: :incrementing)
  file.copy_permissions_to(untrimmed_cbz)
  scaled.delete_directory
  trimmed = trim_all(compression:compression, directory:extracted, trim_count:trim_count)
  cbz = file.with_extension('cbz').sibling_with_appendix('-trimmed')
  trimmed.copy_directory_to_zip(cbz, naming: :incrementing)
  file.copy_permissions_to(cbz)
  extracted.delete_directory
  trimmed.delete_directory
  file.delete if delete
end

def convert_all(compression:, delete:, directory:, trim_count:)
  done = Set.new
  while file = directory.children_with_extension('pdf', exclude:done).first&.absolute
    if file.with_extension('cbz').sibling_with_appendix('-trimmed').exist?
      puts("Skipping existing #{file.basename}")
    else
      puts("Converting #{file.basename}")
      convert(compression:compression, delete:delete, file:file, trim_count:trim_count)
    end
    done << file
  end
end

def extract_images(path)
  puts("  Extracting images from #{path.basename}")
  name = "#{path.basename_without_extension}-extracted"
  target_directory = path.sibling(name).make_directory
  if target_directory.directory_is_empty?
    Shell.run(['gs', '-dNOPAUSE' , '-dBATCH', '-sDEVICE=png16m', "-sOutputFile=\"#{target_directory.absolute}/%05d.png\"", '-r600', path.absolute.to_s])
  end
  target_directory
end

def trim_all(compression:, directory:, trim_count:)
  source_directory = directory
  action_name = trim_count > 0 ? 'Trimming' : 'Resizing'
  compression ||= 'webp'
  puts("  #{action_name} images in #{directory.basename}")
  read_from_directory = directory
  trim_directories = []
  begin
    for i in 2..trim_count
      puts("    Extra trim #{i}")
      iteration = i-1
      trim_directory = directory.create_sibling_directory_with_appendix("-trim-#{i}")
      read_from_directory.each_file do |source_path|
        trim_path = trim_directory.child(source_path.with_extension('webp').basename)
        puts("      Trimming #{source_path.basename} -> #{trim_path.extension}")
        Magick.convert(quality: :lossless, source:source_path, target:trim_path)
      end
      trim_directories << trim_directory
      read_from_directory = trim_directory
    end
    target_directory = source_directory.create_sibling_directory_with_appendix('-trimmed')
    puts("    #{action_name}")
    read_from_directory.each_file do |source_path|
      target_path = target_directory.child("#{source_path.basename_without_extension}.#{compression}")
      if !target_path.exist?
        puts("      #{action_name} #{source_path.basename} -> #{target_path.extension}")
        operations = (trim_count>0) ? [:trim, :resize] : [:resize]
        Magick.convert(operations:operations, quality:94, source:source_path, target:target_path)
      end
    end
  ensure
    trim_directories.each do |d|
      begin
        d.delete_directory
      rescue
      end
    end
  end
  target_directory
end

begin
  options = Slop.parse do |o|
    o.string '--compression', 'The type of image compression to use in the cbz', default:'png'
    o.bool '--delete', 'Delete the PDF file after conversion'
    o.integer '--trims', 'The number of trims to apply', default:2
  end
  convert_all(compression:options[:compression], delete:options[:delete], directory:Pathname.new('.'), trim_count:options[:trims])
rescue ExitException => e
  abort(e.message)
end

