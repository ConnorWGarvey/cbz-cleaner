#!/usr/bin/env groovy

import groovy.cli.commons.CliBuilder
import java.nio.file.Files
import java.nio.file.LinkOption
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.attribute.GroupPrincipal
import java.nio.file.attribute.PosixFileAttributes
import java.nio.file.attribute.PosixFileAttributeView
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipOutputStream

class Converter {
  void apply(Map opts=[:], Path file) {
    def extracted = extractImages(file)
    def name = fileNameWithoutExtension(file)
    def trimmed = trimAll(extracted, compression:opts.compression)
    def cbz = Paths.get("${name}.cbz").toAbsolutePath()
    writeCbz(cbz, trimmed)
    copyPermissions(file, cbz)
    extracted.deleteDir()
    trimmed.deleteDir()
    if (opts.delete) Files.delete(file)
  }

  void applyAll(Map opts=[:], Path directory) {
    def done = [] as Set
    do {
      def file = firstWithExtension(directory, 'pdf', exclude:done)
      if (file) {
        println "Converting ${file.fileName}"
        apply(file, compression:opts.compression, delete:opts.delete)
      }
      done << file.toAbsolutePath()
    } while (firstWithExtension(directory, 'pdf', exclude:done))
  }

  void copyPermissions(Path from, Path to) {
    GroupPrincipal group = Files.readAttributes(from, PosixFileAttributes.class, LinkOption.NOFOLLOW_LINKS).group()
    Files.getFileAttributeView(to, PosixFileAttributeView.class, LinkOption.NOFOLLOW_LINKS).setGroup(group)
  }

  void execute(List<String> command) {
    def proc = command.execute()
    def out = proc.in.text
    def err = proc.err.text
    proc.waitFor()
    def exitValue = proc.exitValue()
    if (exitValue != 0) {
      throw new ExitException("$out\n\n$err")
    }
  }

  Path extractImages(Path path) {
    println "  Extracting images from ${path.fileName}"
    def name = "${fileNameWithoutExtension(path)}-extracted"
    def targetDirectory = Paths.get(name).toAbsolutePath()
    Files.createDirectories(targetDirectory)
    if (Files.list(targetDirectory).toList().isEmpty()) {
      execute(['gs', '-dNOPAUSE' , '-dBATCH', '-sDEVICE=png16m', "-sOutputFile=\"${targetDirectory.toString()}/%05d.png\"", '-r600', path.fileName.toString()])
    }
    targetDirectory
  }

  String fileExtension(Path path) {
    def name = path.fileName.toString()
    name[name.lastIndexOf('.')+1..-1]
  }

  String fileNameWithoutExtension(Path path) {
    fileNameWithoutExtension(path.fileName.toString())
  }

  String fileNameWithoutExtension(String name) {
    name[0..name.lastIndexOf('.')-1]
  }

  Path firstWithExtension(Map opts=[:], Path directory, String extension) {
    def exclude = opts.exclude ?: []
    Files.list(directory).toList().find { (fileExtension(it) == extension) && (it.toAbsolutePath() !in exclude) }
  }

  Path trimAll(Map opts=[:], Path sourceDirectory) {
    def compression = opts.compression ?: 'webp'
    println "  Trimming images in ${sourceDirectory.fileName}"
    def targetDirectory = sourceDirectory.parent.resolve("${sourceDirectory.fileName}-trimmed")
    Files.createDirectories(targetDirectory)
    sourceDirectory.eachFile { sourcePath ->
      def targetPath = targetDirectory.resolve("${fileNameWithoutExtension(sourcePath)}.$compression")
      if (!Files.exists(targetPath)) {
        println "    Trimming ${sourcePath.fileName}"
        execute(['convert', '-alpha', 'flatten', sourcePath.toString(), '-fuzz', '5%', '-trim', '+repage', '-resize', '2500>x2500>', '+repage', '-quality', '94', targetPath.toString()])
      }
    }
    targetDirectory
  }

  void writeCbz(Path target, Path sourceDirectory) {
    println '  Compressing the CBZ'
    assert Files.isDirectory(sourceDirectory)
    def sourcePaths = Files.list(sourceDirectory).toList().toSorted()
    def digits = sourcePaths.size().toString().length()
    new ZipOutputStream(Files.newOutputStream(target)).withCloseable { zipOut ->
      sourcePaths.eachWithIndex { sourcePath, index ->
        def formattedIndex = String.format("%0${digits}d", index+1)
        def entryOut = new ZipEntry("${formattedIndex}.${fileExtension(sourcePath)}")
        zipOut.putNextEntry(entryOut)
        Files.newInputStream(sourcePath).withCloseable { content ->
          content.transferTo(zipOut)
        }
        zipOut.closeEntry()
      }
      zipOut.finish()
    }
  }
}

class ExitException extends Exception {
  public ExitException(String message) {
    super(message)
  }
}

try {
  def parser = new CliBuilder(usage:'pdf-to-cbz').tap {
    _ longOpt:'delete', 'Delete the PDF file after conversion'
    _ longOpt:'compression', args:1, defaultValue:'webp', 'The type of image compression to use in the cbz'
  }
  def options = parser.parse(args)
  new Converter().applyAll(Paths.get(''), compression:options.compression, delete:options.delete)
} catch (ExitException e) {
  println e.message
  System.exit(1)
}

