#!/usr/bin/env groovy

import java.nio.file.Files
import java.nio.file.LinkOption
import java.nio.file.Path
import java.nio.file.Paths
import java.nio.file.attribute.GroupPrincipal
import java.nio.file.attribute.PosixFileAttributes
import java.nio.file.attribute.PosixFileAttributeView
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipOutputStream

class Converter {
  void apply(String file) {
    def extracted = extractImages(Paths.get(file).toAbsolutePath())
    def name = fileNameWithoutExtension(file)
    def trimmed = trimAll(extracted)
    def cbz = Paths.get("${name}.cbz").toAbsolutePath()
    writeCbz(cbz, trimmed)
    copyPermissions(Paths.get(file).toAbsolutePath(), cbz)
    extracted.deleteDir()
    trimmed.deleteDir()
  }

  void copyPermissions(Path from, Path to) {
    GroupPrincipal group = Files.readAttributes(from, PosixFileAttributes.class, LinkOption.NOFOLLOW_LINKS).group();
    Files.getFileAttributeView(to, PosixFileAttributeView.class, LinkOption.NOFOLLOW_LINKS).setGroup(group);
  }

  void execute(List<String> command) {
    def proc = command.execute()
    def out = proc.in.text
    def err = proc.err.text
    proc.waitFor()
    def exitValue = proc.exitValue()
    if (exitValue != 0) {
      throw new ExitException("$out\n\n$err")
    }
  }

  Path extractImages(Path path) {
    println 'Extracting images from the PDF'
    def name = fileNameWithoutExtension(path)
    def targetDirectory = Paths.get(name).toAbsolutePath()
    Files.createDirectories(targetDirectory)
    if (Files.list(targetDirectory).toList().isEmpty()) {
      execute(['gs', '-dNOPAUSE' , '-dBATCH', '-sDEVICE=png16m', "-sOutputFile=\"${targetDirectory.toString()}/%04d.png\"", '-r600', "${name}.pdf"])
    }
    targetDirectory
  }

  String fileNameWithoutExtension(Path path) {
    fileNameWithoutExtension(path.fileName.toString())
  }

  String fileNameWithoutExtension(String name) {
    name[0..name.lastIndexOf('.')-1]
  }

  Path trimAll(Path sourceDirectory) {
    println 'Trimming'
    def targetDirectory = sourceDirectory.parent.resolve("${sourceDirectory.fileName}-trimmed")
    Files.createDirectories(targetDirectory)
    sourceDirectory.eachFile { sourcePath ->
      def targetPath = targetDirectory.resolve("${fileNameWithoutExtension(sourcePath)}.webp")
      if (!Files.exists(targetPath)) {
        println "  Trimming ${sourcePath.fileName}"
        execute(['convert', '-fuzz', '1%', '-trim', '-resize', '2000>x2000>', '-quality', '95', sourcePath.toString(), targetPath.toString()])
      }
    }
    targetDirectory
  }

  void writeCbz(Path target, Path sourceDirectory) {
    println 'Compressing'
    assert Files.isDirectory(sourceDirectory)
    new ZipOutputStream(Files.newOutputStream(target)).withCloseable { zipOut ->
      Files.list(sourceDirectory).toList().toSorted().each { sourcePath ->
        println "  Compressing ${sourcePath.fileName}"
        def entryOut = new ZipEntry(sourcePath.fileName.toString())
        zipOut.putNextEntry(entryOut)
        Files.newInputStream(sourcePath).withCloseable { content ->
          content.transferTo(zipOut)
        }
        zipOut.closeEntry()
      }
      zipOut.finish()
    }
  }
}

class ExitException extends Exception {
  public ExitException(String message) {
    super(message)
  }
}

def file = args[0]
try {
  new Converter().apply(file)
} catch (ExitException e) {
  println e.message
  System.exit(1)
}

