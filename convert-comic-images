#!/usr/bin/env ruby

require_relative 'lib/cli'
require_relative 'lib/magick'
require_relative 'lib/pathname_extensions'
require 'set'
require 'slop'

def convert(compression:, delete:, directory:, trim_count:)
  scaled = trim_all(compression:compression, directory:directory, suffix:'-untrimmed', trim_count:0)
  directory.copy_permissions_to(scaled)
  child = directory.first_child
  scaled.children.each{|target|child.copy_permissions_to(target)} if (child)
  trimmed = trim_all(compression:compression, directory:directory, suffix:'-trimmed', trim_count:trim_count)
  trimmed.children.each{|target|child.copy_permissions_to(target)} if (child)
  directory.delete_directory if delete
end

def convert_all(compression:, delete:, directory:, trim_count:)
  done = Set.new
  #puts directory.child_directories(exclude:done).select{|p|!p.basename.to_s.end_with?('-trimmed') && !p.basename.to_s.end_with?('-untrimmed')}.map{|d|d.basename.to_s}.join("\n")
  while child_directory = directory.child_directories(exclude:done).select{|p|!p.basename.to_s.end_with?('-trimmed') && !p.basename.to_s.end_with?('-untrimmed')}.first&.absolute
    if child_directory.sibling_with_appendix('-trimmed').exist?
      puts("Skipping existing #{child_directory.basename}")
    else
      puts("Converting #{child_directory.basename}")
      convert(compression:compression, delete:delete, directory:child_directory, trim_count:trim_count)
    end
    done << child_directory
  end
end

def trim_all(compression:, directory:, trim_count:, suffix:)
  source_directory = directory
  action_name = trim_count > 0 ? 'Trimming' : 'Resizing'
  puts("  #{action_name} images in #{directory.basename}")
  read_from_directory = directory
  trim_directories = []
  begin
    for i in 2..trim_count
      puts("    Extra trim #{i}")
      iteration = i-1
      trim_directory = directory.create_sibling_directory_with_appendix("-trim-#{i}")
      read_from_directory.each_file(exclude:['.nomedia']) do |source_path|
        trim_path = trim_directory.child(source_path.with_extension('webp').basename)
        puts("      Trimming #{source_path.basename} -> #{trim_path.extension}")
        Magick.convert(quality: :lossless, source:source_path, target:trim_path)
      end
      trim_directories << trim_directory
      read_from_directory = trim_directory
    end
    target_directory = source_directory.create_sibling_directory_with_appendix(suffix)
    puts("    #{action_name}")
    read_from_directory.each_file(exclude:['.nomedia']) do |source_path|
      target_path = target_directory.child("#{source_path.basename_without_extension}.#{compression}")
      if !target_path.exist?
        puts("      #{action_name} #{source_path.basename} -> #{target_path.extension}")
        operations = (trim_count>0) ? [:trim, :resize] : [:resize]
        Magick.convert(operations:operations, quality:94, source:source_path, target:target_path)
      end
    end
  ensure
    trim_directories.each do |d|
      begin
        d.delete_directory
      rescue
      end
    end
  end
  target_directory
end

begin
  options = Slop.parse do |o|
    o.string '--compression', 'The type of image compression to use', default:'png'
    o.bool '--delete', 'Delete the source directory after conversion'
    o.integer '--trims', 'The number of trims to apply', default:2
  end
  convert_all(compression:options[:compression], delete:options[:delete], directory:Pathname.new('.'), trim_count:options[:trims])
rescue ExitException => e
  abort(e.message)
end

